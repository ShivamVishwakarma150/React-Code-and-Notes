Data Binding
------------
- Binding Expression
- Property Binding 

Ex: Presenting table

export default function DataBindingComponent(){
    var products = [
        {Name:'Samsung TV',Price:56000.44},
        {Name:'Nike Casuals',Price:4200.44}
    ];
    return(
          <div className="container">
            <h2>Product table </h2>
            <table className="table table-hover">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Price</th>
                    </tr>
                </thead>
                <tbody>
                    {
                        products.map(product=>
                            <tr>{product.Name}</tr>
                            <tr>{product.Price}</tr>
                        )
                    }
                </tbody>
            </table>
        </div>
          
    )
}



Ex: Nested Iterations

export default function DataBindingComponent(){
    var menu = [
        {Category:"Electronics",products:["samsung Tv","Mobile"]},
        {Category:"Footwear",products:["Nike casuals ","Lee Boot"]}
    ]
    return(
          <div className="container">
          <h2>Categories</h2>
            <ol>
                {
                    menu.map(item=>
                        <li key={item.Category}>{iem.Category}
                            <ul>
                                {
                                    item.products.map(product=>
                                    <li key={product}>{product}</li>
                                    )
                                }
                            </ul>
                        </li>
                         
                    )
                }
            </ol>
            <h2> Select a product</h2>
            <select>
                {
                    menu.map(item=>
                        <optgroup key={item.category} label={item.Category}>
                            {
                                item.products.map(product=>
                                    <option key={product}>{product}</option>
                                )
                            }
                        </optgroup>
                    )
                }
            </select>
          </div>
          
    )
}


- React supports only "One way Binding" (Drawback of React)
It will read and present the data but any modification in data cannot be reflected back.

- Two way binding is not supported implicitly, you have to implement Explicitly by using "Event Binding".
- Two way binding is the process of identifying changes in UI and update back the data.
- you have to Explicitly manage by using Event Handlers like.
    onChange
    onBlur
    onKeyup etc.

- Never uses variables to handle data in Component
- Variables are immutable
- Component must have data in only mutable properties
- You have to use "State" for storing data.
- Class Component in react have default state.
- Function Component requires explicit state.
- you can configure state for function Component by using "useState" hook
- react hooks are lifecycle methods

- It is an Array Type that comprises of 2 elements
    a) getter 
    b) setter 
- you have to use a destructuring technique to access the "accessors" from useState.

Syntax:
    const [getter,setter] = useState(value);


export default function DataBindingComponent(){
    var username = "John";
    return(
          <div className="container">
            <h2>User Details</h2>
            User Name:
            <input type="text" value={username}/>
            <br/>
            Hello! {username}
          </div>
          
    )
}
// Here in this example we cannot write Here. Here fields are mutable


export default function DataBindingComponent(){
    var username = "John";
    return(
          <div className="container">
            <h2>User Details</h2>
            User Name:
            <input type="text" value={username}/>
            <br/>
            Hello! {username}
          </div>
          
    )
}


Eg- using useState

import {useState} from "react";
export default function DataBindingComponent(){
    useState(get,set);
    const {getName,setName}=useState('TV');
    return(
           <div className="container">
            {getName}
          </div>
          
    )
}


import {useState} from "react";
export default function DataBindingComponent(){
    //useState(get,set);
    const [products,setProduct]=useState(["TV","Mobile","Shoe"]);
    return(
           <div className="container">
            <ol>
                {
                    products.map(product=>
                        <li key={product}>{product}</li>
                    )
                }
            </ol>
          </div>
          
    )
}

- In class Component the actions to perform on Component initialization are performed by using lifecycle Hook method.
    a) ComponentDidMount()
    b) ComponentMount()

- In function component it is managed by using a Hook.
    "useEffects()"
 [It acts as a constructor]
Syntax:
    useEffects(()=>{

    },[dependencies])


Eg: NASA API

import {useState,useEffect} from "react";

export default function DataBindingComponent(){
    const [mars,setMars] = useState();
    useEffect(()=>{
        fetch("https://api.nasa.gov/mars-photos/api/v1/rovers/curiosity/photos?sol=1000&api_key=DEMO_KEY")
        .then(response=>response.json())
        .then(data=>{
            setMars(data);
        })
    },[])
     return(
           <div className="container">
            <h2>Mars photos</h2> 
            <table className="table table-hover">
                <thead>
                    <tr>
                        <th>Photo Id</th>
                        <th>Camera Name</th>
                        <th>Rover Name</th>
                        <th>preview</th>
                        
                    </tr>
                </thead>
                <tbody>
                    {
                        mars.photos.map(photo=>{
                            <tr>
                                <td>{photo.id}</td>
                                <td>{photo.camera.full_name}</td>
                                <td>{photo.rover.name}</td>
                                <td>
                                    <img src="{photo.img_src}" width="100" height="100"/>
                                </td>
                            </tr>

                        })
                    }
                </tbody>
            </table>
          </div>
          
    )
}